import streamlit as st
import pandas as pd
import numpy as np
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
st.title("Machine Learning")
st.subheader("‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.write("- Dataset ‡∏Ñ‡∏∑‡∏≠ Adult")
file_path = "pages/adult.data"

df = pd.read_csv(file_path, sep=",\s*", engine='python', na_values=["?"])

st.subheader("Dataset ‡∏î‡∏¥‡∏ö")
st.dataframe(df, height=300)

st.write("""
- Donated on 4/30/1996
- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô 50,000 ‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏°‡∏∞‡πÇ‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£
- ‡πÇ‡∏î‡∏¢‡πÅ‡∏Ñ‡∏°‡πÄ‡∏õ‡∏ç‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ß‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏ù‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏Ç‡∏≠‡∏á‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "yes" ‡∏´‡∏£‡∏∑‡∏≠ "no")
""" 
)
st.subheader("Features ‡∏Ç‡∏≠‡∏á Dataset")
st.write("""
- "age": ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
- "workclass": ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô 
- "fnlwgt": ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- "education": ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
- "education-num": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
- "marital-status": ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏£‡∏™
- "occupation": ‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• 	
- "relationship": ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
- "race":‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
- "sex": ‡πÄ‡∏û‡∏®
- "capital-gain": ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô
- "capital-loss": ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô
- "hours-per-week": ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
- "native-country":‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î
- "income": ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
         """)


st.write("""‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å https://archive.ics.uci.edu/dataset/2/adult""" )
st.subheader("""Algorithm ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
- SVM (Support Vector Machine) ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á Hyperplane ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏®‡∏±‡∏¢ Support Vectors ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
- KNN (K-Nearest Neighbors) ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ò‡∏∂‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á (Distance) ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á (Neighbors) ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô""") 
st.subheader("‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
st.write("‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 50,000 ‡∏î‡∏≠‡∏•‡∏•‡∏≤‡∏£‡πå‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ")

st.title("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ Support Vector Machine ‡πÅ‡∏•‡∏∞ K-Nearest Neighbors")
st.subheader("""‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå
             columns = [
                 "age", "workclass", "fnlwgt", "education", "education-num", "marital-status",
                "occupation", "relationship", "race", "sex", "capital-gain", "capital-loss",
                 "hours-per-week", "native-country", "income"]
               df = pd.read_csv(file_path, sep=",\s*", engine='python', na_values=["?"], names=columns)
             """)
st.write("""-  ‡πÉ‡∏ä‡πâ na_values ‡πÅ‡∏õ‡∏•‡∏á "?" ‡πÄ‡∏õ‡πá‡∏ôNaN""" )
st.subheader("‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing Values")
st.write("""-  ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏î‡πâ‡∏ß‡∏¢ Unknown  df.fillna("Unknown", inplace=True)""" )
st.subheader("""  ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• categorical ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏î‡πâ‡∏ß‡∏¢ label_encoders
                  label_encoders = {}
                  for col in df.select_dtypes(include=["object"]).columns:
                     le = LabelEncoder()
                     df[col] = le.fit_transform(df[col].astype(str))
                     label_encoders[col] = le
             """)

st.subheader("""  ‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Train/Test
                X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, 
                random_state=42, stratify=y  )
             """)


st.subheader("""  ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Normalization) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)
             """) 

st.subheader("""   ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
             """)
st.write("""svm_kernel = poly""" )
st.write("""knn_neighbors = 17 ‡πÇ‡∏î‡∏¢‡∏´‡∏≤‡∏à‡∏≤‡∏Å Cross-validatio""" )
st.subheader("""  Cross-calidatio
             k_values = list(range(1, 20, 2))  # ‡∏•‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ k = 1, 3, 5, ..., 15
               best_k = k_values[0]
               best_score = 0

               # ‡πÉ‡∏ä‡πâ Cross-validation ‡∏´‡∏≤ k ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
               for k in k_values:
               knn_temp = KNeighborsClassifier(n_neighbors=k)
               score = np.mean(cross_val_score(knn_temp, X_train_scaled, y_train, cv=5))
               
               if score > best_score:
                    best_score = score
                    best_k = k   (‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô 17)
             """)


st.subheader("""   ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•  SVM
             svm_model = SVC(kernel=svm_kernel)
        svm_model.fit(X_train_scaled, y_train)
         """)
st.subheader("""   ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•  KNN 
             knn_model = KNeighborsClassifier(n_neighbors=knn_neighbors)
        knn_model.fit(X_train_scaled, y_train)
        
             """)



st.subheader("""  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå SVM
             y_pred_svm = svm_model.predict(X_test_scaled)
             """)

st.subheader("""  ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå KNN
             y_pred_knn = knn_model.predict(X_test_scaled)
             """)

st.subheader("""  ‡∏ß‡∏±‡∏î‡∏ú‡∏• ‡∏î‡πâ‡∏ß‡∏¢ accuracy_score ‡πÅ‡∏•‡∏∞ classification_report                     """)
st.write("""‡πÇ‡∏î‡∏¢ accuracy_score 
- ‡∏ö‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤ ‡πÅ‡∏ï‡πà ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏• """ )
st.write("""classification_report
- Precision (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™) ‚Üí ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏µ‡πà‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
- Recall (Sensitivity/Recall Score) ‚Üí ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡∏•‡∏≤‡∏™ 1
- F1-score ‚Üí ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Precision ‡πÅ‡∏•‡∏∞ Recall
- Support ‚Üí ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏•‡∏≤‡∏™""" )

st.subheader("""  ‡∏ß‡∏±‡∏î‡∏ú‡∏• SVM
             svm_acc = accuracy_score(y_test, y_pred_svm)
             svm_report = classification_report(y_test, y_pred_svm, output_dict=True)
             """)
st.subheader("""  ‡∏ß‡∏±‡∏î‡∏ú‡∏• KNN
                knn_acc = accuracy_score(y_test, y_pred_knn)
                knn_report = classification_report(y_test, y_pred_knn, output_dict=True)
             """)

st.subheader("""  ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• KNN ‡πÅ‡∏•‡∏∞ SVM
- st.subheader(" ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
- st.write(f"**Accuracy SVM ({svm_kernel} kernel):** {svm_acc:.4f}")
- st.write(f"**Accuracy KNN ({knn_neighbors} neighbors):** {knn_acc:.4f}")
- st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏• SVM")
- st.dataframe(pd.DataFrame(svm_report).transpose())
- st.subheader("üìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏• KNN")
- st.dataframe(pd.DataFrame(knn_report).transpose())

             """)